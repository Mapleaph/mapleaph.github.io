[{"title":"Set up RaspberryPi","date":"2016-01-28T05:25:25.000Z","path":"2016/01/28/Set-up-RaspberryPi/","text":"Installation最新的系统镜像可以从官网上取得，将解压后得到的 img 文件写入到 TF 卡中。 dd 命令 Mac 下出现了写入不结束的情况，失败。 Linux 下写入正常，但写入后的 TF 卡无法挂载，提示重新格式化。 Win32DiskImager目前仅能够通过这种方法进行写入。使用过程很简单，这里不做描述。 Boot Configuration目前采用的环境是利用 HDMI 转 DVI 线缆链接树梅派和显示器，但默认情况下显示器是没有输出的，需要我们先利用读卡器将 TF 卡挂载到其他系统中，然后编辑 /config.txt 文件，需要去掉几句话的注释，如下： 123456disable_overscan=1hdmi_force_hotplug=1hdmi_group=1hdmi_mode=1hdmi_driver=2config_hdmi_boost=4 如果你发现现实分辨率不对，那么需要更改其中的两项： 12hdmi_group=2hdmi_mode=x 其中 x 的值为下表中的编号： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586hdmi_mode=1 640x350 85Hzhdmi_mode=2 640x400 85Hzhdmi_mode=3 720x400 85Hzhdmi_mode=4 640x480 60Hzhdmi_mode=5 640x480 72Hzhdmi_mode=6 640x480 75Hzhdmi_mode=7 640x480 85Hzhdmi_mode=8 800x600 56Hzhdmi_mode=9 800x600 60Hzhdmi_mode=10 800x600 72Hzhdmi_mode=11 800x600 75Hzhdmi_mode=12 800x600 85Hzhdmi_mode=13 800x600 120Hzhdmi_mode=14 848x480 60Hzhdmi_mode=15 1024x768 43Hz DO NOT USEhdmi_mode=16 1024x768 60Hzhdmi_mode=17 1024x768 70Hzhdmi_mode=18 1024x768 75Hzhdmi_mode=19 1024x768 85Hzhdmi_mode=20 1024x768 120Hzhdmi_mode=21 1152x864 75Hzhdmi_mode=22 1280x768 reduced blankinghdmi_mode=23 1280x768 60Hzhdmi_mode=24 1280x768 75Hzhdmi_mode=25 1280x768 85Hzhdmi_mode=26 1280x768 120Hz reduced blankinghdmi_mode=27 1280x800 reduced blankinghdmi_mode=28 1280x800 60Hzhdmi_mode=29 1280x800 75Hzhdmi_mode=30 1280x800 85Hzhdmi_mode=31 1280x800 120Hz reduced blankinghdmi_mode=32 1280x960 60Hzhdmi_mode=33 1280x960 85Hzhdmi_mode=34 1280x960 120Hz reduced blankinghdmi_mode=35 1280x1024 60Hzhdmi_mode=36 1280x1024 75Hzhdmi_mode=37 1280x1024 85Hzhdmi_mode=38 1280x1024 120Hz reduced blankinghdmi_mode=39 1360x768 60Hzhdmi_mode=40 1360x768 120Hz reduced blankinghdmi_mode=41 1400x1050 reduced blankinghdmi_mode=42 1400x1050 60Hzhdmi_mode=43 1400x1050 75Hzhdmi_mode=44 1400x1050 85Hzhdmi_mode=45 1400x1050 120Hz reduced blankinghdmi_mode=46 1440x900 reduced blankinghdmi_mode=47 1440x900 60Hzhdmi_mode=48 1440x900 75Hzhdmi_mode=49 1440x900 85Hzhdmi_mode=50 1440x900 120Hz reduced blankinghdmi_mode=51 1600x1200 60Hzhdmi_mode=52 1600x1200 65Hzhdmi_mode=53 1600x1200 70Hzhdmi_mode=54 1600x1200 75Hzhdmi_mode=55 1600x1200 85Hzhdmi_mode=56 1600x1200 120Hz reduced blankinghdmi_mode=57 1680x1050 reduced blankinghdmi_mode=58 1680x1050 60Hzhdmi_mode=59 1680x1050 75Hzhdmi_mode=60 1680x1050 85Hzhdmi_mode=61 1680x1050 120Hz reduced blankinghdmi_mode=62 1792x1344 60Hzhdmi_mode=63 1792x1344 75Hzhdmi_mode=64 1792x1344 120Hz reduced blankinghdmi_mode=65 1856x1392 60Hzhdmi_mode=66 1856x1392 75Hzhdmi_mode=67 1856x1392 120Hz reduced blankinghdmi_mode=68 1920x1200 reduced blankinghdmi_mode=69 1920x1200 60Hzhdmi_mode=70 1920x1200 75Hzhdmi_mode=71 1920x1200 85Hzhdmi_mode=72 1920x1200 120Hz reduced blankinghdmi_mode=73 1920x1440 60Hzhdmi_mode=74 1920x1440 75Hzhdmi_mode=75 1920x1440 120Hz reduced blankinghdmi_mode=76 2560x1600 reduced blankinghdmi_mode=77 2560x1600 60Hzhdmi_mode=78 2560x1600 75Hzhdmi_mode=79 2560x1600 85Hzhdmi_mode=80 2560x1600 120Hz reduced blankinghdmi_mode=81 1366x768 60Hzhdmi_mode=82 1080p 60Hzhdmi_mode=83 1600x900 reduced blankinghdmi_mode=84 2048x1152 reduced blankinghdmi_mode=85 720p 60Hzhdmi_mode=86 1366x768 reduced blanking apt-get Configuration12345change the line of /etc/apt/sources.list todeb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian jessie main contrib non-free rpithen comment the line of /etc/apt/sources.list.d/raspi.listdeb http://archive.raspberrypi.org/debian jessie main ui Chinese SupportOtherwise, square characters will be displayed in the web browser. 1sudo apt-get install ttf-wqy-zenhei scim-pinyin Choose the Correct Keyboard LayoutGoto Menu -&gt; Preferences -&gt; Raspberry Pi Configuration: Localisation, Set Keyboard: choose United States, English(US).Set Locale: en(English), US(USA), UTF-8. Expand the Available SpaceOtherwise, you cannot use the whole disk space of your TF card. Open the terminal, type: sudo raspi-config, then select Expand Filesystem.","tags":[]},{"title":"Customize Redmine Plugin Dmsf","date":"2015-12-26T09:35:49.000Z","path":"2015/12/26/Customize-Redmine-Plugin-Dmsf/","text":"Add a Hook in the Redmine SourceThis official redmine source doesn’t provide a hook if I what to do something just after a project created. So I’m gonna write a hook on my own. In the file /path/to/redmine/app/controllers/projects_controller.rb, we just add a one-line code like this: 1234567891011def create @issue_custom_fields = IssueCustomField.sorted.to_a @trackers = Tracker.sorted.to_a @project = Project.new @project.safe_attributes = params[:project] if @project.save unless User.current.admin? @project.add_default_member(User.current) end call_hook(:controller_project_new_after_save, &#123;:params =&gt; params, :project =&gt; @project&#125;) The call_hook line is what the functionality takes place. Notice that we should add the line inside the create function not new function. Next, we can actually do something nice by adding a file /path/to/redmine/plugins/redmine_dmsf/lib/redmine_dmsf/hooks/controller_project_new_after_save.rb 123456789101112module RedmineDmsf module Hooks include Redmine::Hook class ControllerProjectNewAfterSaveHook &lt; Redmine::Hook::ViewListener def controller_project_new_after_save(context=&#123; &#125;) params = context[:params] project = context[:project] # then you can add code whatever you like. Finally, we should add the file path to the redmine_dmsf.rb file under /path/to/redmine/plugins/redmine_dmsf/lib. 1require 'redmine_dmsf/hooks/controller_project_new_after_save_hook' Update DatabaseIf we want to update the database by just one command, you can add a ruby file called seeds.rb under the folder /path/to/redmine/db/, then execute the command in the redmine command line environment. 1rake db:seed RAILS_ENV=production","tags":[]},{"title":"My Software List","date":"2015-11-26T13:36:46.000Z","path":"2015/11/26/My-Software-List/","text":"MacAlfred 2OmnifocusDEVONthink ProDupeGuru PELinuxWiniOSAndroid","tags":[]},{"title":"Things Need to Know about Mac OS X","date":"2015-11-26T13:10:55.000Z","path":"2015/11/26/Things-Need-to-Know-about-Mac-OSX/","text":"快捷键 剪切 Command + drag 复制 Option + drag 创建符号链接 Command + Option + drag 安装 gdbMac OS X 从 10.9 开始选择 lldb 而不是 gdb 作为程序调试器，选用 clang 和 llvm 分别代替 gcc 和 ld。 如果想要安装 gdb，可以通过如下命令实现： 1brew install homebrew/dupes/gdb system_profiler (同 lsusb 命令)1system_profiler SPUSBDataType SSH打开终端使用 SSH 成功连接服务器后，出现 1warning: setlocale: LC_CTYPE: cannot change locale (UTF-8): No such file or directory 的问题，解决方法如下： 将 /etc/ssh_config 文件的 1SendEnv LANG LC_* 一行注释掉，然后保存并重启终端即可。 如何在 Mac 下关闭指定端口对应进程123lsof -i:&lt;port&gt;#上面的命令会列出占用端口的进程，可能不止一个，然后根据进程号 kill 掉对应进程kill &lt;pid&gt; Doxygen brew install graphviz change the configuration LATEX_CMD_NAME to pdflatex change the configuration DOT_PATH to /path/to/dot in the Diagrams Topics of the Wizard tab, change the Diagrams to generate to Use dot tool from the GraphViz package and check all the boxes in the Mode Topics of the Wizard tab, change the Select the desired extraction mode to All Entities and check the Include cross-referenced source code in the output 命令行下用 Sublime Text 打开文件该方法同样适用于其他类似软件，如 MacDown。 方法一 12# 其中 Sublime\\ Text 是应用程序的名称$ open -a Sublime\\ Text &lt;file&gt; 方法二 1234# 先建立软链接$ sudo ln -s /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl# 此后直接用命令打开，更加方便$ subl &lt;file&gt;","tags":[]},{"title":"Solaris","date":"2015-11-26T13:08:48.000Z","path":"2015/11/26/Solaris/","text":"Reinstall grubWhen you get a grub prompt: 1find /multiboot suppose you get a result of (hd0,0), then 1234root (hd0,0)kernel /platform/i86pc/multibootmodule /platform/i86pc/boot_archiveboot If you don’t know what the above command is, type: 1cat /boot/grub/menu.lst When you enter the OS, open a terminal and type: 123format -e # you will get a device id related to the boot diskinstallgrub -m /boot/grub/stage1 /boot/grub/stage2 /dev/rdks/&lt;device-id&gt;reboot Non-cdrom installation for Solaris-u8 Non-cdrom installation for Solaris-u8 Extract “multiboot” and “x86.miniroot” file from “sol-10-u8-ga-x86-dvd.iso”, put those two files into a usb flash disk; Use “grub” to boot the system, then press “c” to enter the grub shell menu; Type the following commands: 12345find /multiboot# Use the result \"(hdx,y)\" of the first command, thenkernel (hdx,y)/multiboot kernel/unix -B install_media=dskmodule (hdx,y)/x86.minirootboot If the above step succeded, then you will see Solaris is starting to boot, after you select 1, you will be given a “sh” shell prompt; In the shell, you should type the following commands: 12345# the actual string after dsk, maybe different on your own systemmount -F pcfs /dev/dsk/c0d0p0:1 /mntlofiadm -a /mnt/sol-10-u8-ga-x86-dvd.isomount -F hsfs /dev/lofi/1 /cdromexit After all these steps, the Solaris installation process is starting. Cannot enter into GUI when booting SolarisEnter into FailSafe mode, then type: 1bootadm update-archive -R /a Solaris 10-u8 在家目录下新建目录的方法默认情况下，root 用户不能在 /home 下新建目录，因为 /home 目录是由 automounter 管理的，我们可以手动修改，让可以在 root 在 /home 下新建目录。 将 /etc/auto_master 中的 /home 一行注释掉 运行 automounter -v 使修改生效。","tags":[]},{"title":"NeoKylin","date":"2015-11-22T04:02:57.000Z","path":"2015/11/22/NeoKylin/","text":"x86 版安装NeoKylin-Personal-v6.0 安装方法更新 [UPDATE]使用 UltraISO 将镜像中的 images/boot.iso 提取出来，然后将其刻录到 U 盘中启动系统，按 TAB 键，将启动参数改为： 1vmlinuz initrd=initrd.img repo=hd:/dev/sda4:/ quiet 之后正常安装即可。 中标麒麟除了 V5，V6 并没有更精确的版本号描述，目前手中共有两个 V6 的版本，只能以默认安装的内核版本进行区分。 !!如果你能把中标麒麟的 iso 镜像文件刻录到光盘里的话，本文档就可以不用看了!! 2.6.36 版本文档仅针对使用 U 盘安装系统的情况，目前共验证了两种方式，一种为本地安装，另一种为 FTP 安装。 本地安装硬盘一个，U 盘一个，一个 Puppy Linux 系统。 Puppy Linux 下载地址：http://distro.ibiblio.org/puppylinux/ 本测试选用 Puppy 5.6 目录下的 slacko-5.6-PAE.iso 使用 puppy linux 为 U 盘安装 Grub4Dos，将 isolinux 文件夹从麒麟系统镜像中提取出来，并复制到 U 盘中，然后更改 U 盘中的 grub.conf 文件为如下内容： 1234root (hdx,y)kernel /isolinux/vmlinuzinitrd /isolinux/initrd.imgboot 其中 (hdx,y) 需要根据实际情况进行修改。 对目标硬盘进行分区，注意需要多分出一个分区来，大小 5GB 即可，格式 FAT32/EXT4，用来存放麒麟的系统镜像和从镜像中提取出来的 images 文件夹。 使用 U 盘引导系统，在选择镜像所在磁盘时，选择上一步那个多分出来的分区，这一步找的是 images/install.img 文件。 在之后的安装方式上选择自定义磁盘分区，注意不要挂在最后一个分区，否则之后会出错。 如果在接下来查找镜像时出现 device or resource busy 的错误，那么这种安装方式宣告失败，请换用下面的 FTP 安装方式。 FTP 安装如果用的是 Mac 系统，可以选用，Rumpus FTP Server 进行 FTP 服务器搭建，如果用 Windows，可用 File zilla。 同本地安装的第一步 将 Packages, repodata, images 文件夹从系统镜像中提取出来并放到 ftp 服务器根目录中。 用 U 盘启动系统，镜像存在位置选择 URL，然后在地址栏中输入 ftp://192.168.x.x/ 正常情况下，会显示 retrieving…，只有按部就班安装即可。 3.3.4 版 将 images/boot.iso 从镜像中提取出来 用 UltraISO 将 boot.iso 写入 U 盘 将麒麟系统镜像拷贝到 U 盘中 用 U 盘引导系统，在出现安装菜单时按 TAB 键，将命令改为 1repo=hd:/dev/sdb4:/ quiet 如果在安装前检测硬盘时提示： “Disk sda contains BIOS RAID metadata, but is not part of any recognized BIOS RAID sets. Ignoring disk sda” 那么就需要改为： 1repo=hd:/dev/sdb4:/ quiet nodmraid 之后按部就班安装即可。 中标麒麟 RapidIO 安装指南磁盘规划总共 20GB partition size bios-boot 1MB boot 500MB root 16GB swap 3GB 编译完内核的剩余空间为：3.8GB 修改安装源提示：该步骤需要确保系统能够联网！ 首先删除 [/etc/yum.repo.d/] 下面的两个文件，然后新建名为 f17.repo 的文件并向其中添加如下内容： 1234567891011121314151617[fedora]name=f17baseurl=http://archives.fedoraproject.org/pub/archive/fedora/linux/releases/17/Fedora/i386/os/enabled=1gpgcheck=0[everything]name=f17-everythingbaseurl=http://archives.fedoraproject.org/pub/archive/fedora/linux/releases/17/Everything/i386/os/enabled=1gpgcheck=0[updates]name=f17-updatesbaseurl=http://archives.fedoraproject.org/pub/archive/fedora/linux/updates/17/i386/enabled=1gpgcheck=0 保存，退出。 更新安装源1$ sudo yum list 安装 ncurses 库（make menuconfig 的时候会用到）1$ sudo yum install ncurses-devel 下载内核源代码123$ cd ~; curl -O https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.3.4.tar.bz2# 等待下载完成后，解压刚刚下载的压缩包并移动到 /usr/src/kernels 目录下$ tar jxf linux-3.3.4.tar.bz2; sudo mv linux-3.3.4 /usr/src/kernels 对内核进行配置12345678910111213141516$ cd ~/linux-3.3.4/; make mrproper; cp /boot/config-3.3.4-5.1.nk.i686.PAE .config$ make menuconfig# 下面进入内核配置界面# 将对两个地方进行配置# 1. 添加 RapidIO 支持# 进入 Bus options (PCI etc.)，选中 RapidIO support，将会弹出子菜单，根据硬件型号，选择前 4 项，即：## IDT Tsi721 PCI Express SRIO Controller support# Discovery timeout duration (seconds) 该值默认为 30# Enable RapidIO Input/Output Ports# RapidIO subsystem debug messages## 2. 去掉默认的启动图片，防止跟中标麒麟的默认开机画面相冲突，不改的话会出现一个小企鹅图片，但不影响 RapidIO 功能的实现：# 进入 Device Drivers -&gt; Graphics support，取消选中 Bootup logo 即可。## 确认修改后，退出保存即可。 编译、安装新内核123# CPU 有几个核，下面的 -j 后面的 n 就改成几，这样可以加快编译速度$ make -j&lt;n&gt;; make modules; sudo make modules_install; sudo make install# 过程中会提示输入密码，请注意，安装完成后，重启系统，将会在启动菜单看到一个 RedHat Linux (3.3.4), 这就是我们的新内核，选这个进入系统就行了。 小修改 删除旧内核的相关文件 123$ sudo rm /boot/System.map* /boot/vmlinuz* /boot/config-3.3.4-5.1.nk.i686.PAE$ sudo rm -rf /lib/modules/3.3.4-5.1.nk.i686.PAE$ sudo rm -rf /usr/src/kernels/3.3.4-5.1.nk.i686.PAE 生成新的 grub.cfg 12$ sudo grub2-mkconfig -o /boot/grub2/grub.cfg# 生成后再对文件进行进一步修改，将 menuentry 后面的 text 去掉 保存，退出。 旧版本麒麟编译安装 2.6.35 版本内核需要卸载 VirtualBox，否则 make install 的时候会报错。 使用如下命令： 1$ rpm -qa | grep VirtualBox | xargs sudo rpm -e 安装串口测试程序 xgcom 的方法这里讨论的是内核版本为 2.6.36 的中标麒麟 在 https://code.google.com/p/xgcom/ 下载 xgcom-0.04.2 版本源码包 删除系统自带的 vte，这个会同时删除 gnome-terminal 和 gnome-color-manager 将下面的信息新建为文件 f13.repo，并放到 /etc/yum.repo.d/ 目录下 1234567891011[f13]name=f13baseurl=http://archives.fedoraproject.org/pub/archive/fedora/linux/releases/13/Fedora/i386/osgpgcheck=0enabled=1[f13-everything]name=f13-everythingbaseurl=http://archives.fedoraproject.org/pub/archive/fedora/linux/releases/13/Everything/i386/osgpgcheck=0enabled=1 将其他源禁用掉 安装 vte, vte-devel, gnome-terminal, gnome-color-manager 进入 xgcom 的源码 123./autogen.shmakesudo make install 龙芯版安装系统安装目前仅支持整盘复制安装 需要一个可启动的 Linux 系统； 在 Linux 系统下，重新对目标硬盘进行分区，要求为：整盘一个分区，可以启动，格式为 ext3； 挂载目标硬盘，进行文件复制： 12345# 假设 sda1 为目标硬盘的分区$ mount /dev/sda1 /mnt/$ tar --numeric-owner -xlpvf Neokylin-DT6-img.tar.gz -C /mnt --touch# 复制完成之后，卸载目标硬盘$ umount /dev/sda1 启动系统 123456# 开机进入 PMON 引导命令行，使用 devls 命令查看设备名称，# 假设得到的硬盘名称为 wd0load /dev/fs/ext2@wd0/boot/vmlinux.3a_newspec# 等待加载成功g console=tty root=/dev/sda1 quiet splash loglevel=0# 正常情况下，即等待进入桌面 升级 Qt4.8.5适用系统版本：NeoKylin-Desktop-V6.0-Update4-Loongson-Release-Build050-20140124 (可用 cat /etc/.product_info 查看)。 执行如下命令： 123456789101112$ sudo rpm -Uvh qt-4.8.6-10.ND6.2.mipsel.rpm \\qt-x11-4.8.6-10.ND6.2.mipsel.rpm \\qt-devel-4.8.6-10.ND6.2.mipsel.rpm \\qt-demos-4.8.6-10.ND6.2.mipsel.rpm \\qt-examples-4.8.6-10.ND6.2.mipsel.rpm \\qt-odbc-4.8.6-10.ND6.2.mipsel.rpm \\qt-doc-4.8.6-10.ND6.2.noarch.rpm \\qt-assistant-4.8.6-10.ND6.2.mipsel.rpm \\qtwebkit-2.2-3.20110513.ND6.3.mipsel.rpm \\libjpeg-turbo-devel-1.2.90-2.ND6.mipsel.rpm \\libjpeg-turbo-1.2.90-2.ND6.mipsel.rpm \\libjpeg-turbo-static-1.2.90-2.ND6.mipsel.rpm","tags":[]},{"title":"Windows Power Management","date":"2015-11-22T03:52:36.000Z","path":"2015/11/22/Windows-Power-Management/","text":"系统电源状态 Status Description S0(Working) CPU 全功率运行 S4(Hibernate) 系统停止，RAM 被保存到磁盘 S5(Shutdown) 系统停止并关闭，需要完全引导以恢复操作 S1(Sleeping) CPU 停止，RAM 被刷新 S2(Sleeping) CPU 不通电，RAM 被刷新 S3(Sleeping) CPU 不通电，RAM 处于低速刷新模式，电源功率输出降低 设备电源状态 Status Description D0 设备全功率运行 D3 设备没有电，环境丢失 D1 设备处于低功率运行模式，设备环境可能被保留 D2 设备处于低功率运行模式，设备环境可能无效 操作系统不直接处理设备的电源状态，而是由驱动程序专门来处理。设备至少要支持 D0 和 D3 两种状态。","tags":[]},{"title":"Windows Device Driver","date":"2015-11-22T03:26:52.000Z","path":"2015/11/22/Windows-Device-Driver/","text":"This guide is for the target of pci bus device and its sub-devices resources allocation. For Bus DriverFirst you should design a customized data structure for storing the resource you gethered, let’s just called it DEVICE_EXTENSION: 12345678910111213typedef structure &#123; WDFDEVICE device; ULONG port0Base; ULONG port0Length; ULONG port1Base; ULONG port1Length; ....&#125; DEVICE_EXTENSION, *PDEVICE_EXTENSION; suppose your bus device has two io ports. then you should register a callback function before calling WdfDeviceCreate: 123456789101112131415161718192021222324252627282930EVT_WDF_DEVICE_RESOURCES_PREPARE_HARDWARE Bus_EvtDevicePrepareHardware;#ifdef ALLOC_PRAGMApragma alloc_text (PAGE, Bus_EvtDevicePrepareHardware);...#endifNTSTATUS xxxEvtDeviceAdd(IN WDFDRIVER Driver, IN PWDFDEVICE_INIT DeviceInit)&#123; ... WDF_PNPPOWER_EVENT_CALLBACKS pnpPowerCallbacks; WDF_PNPPOWER_EVENT_CALLBACKS_INIT(&amp;pnpPowerCallbacks); pnpPowerCallbacks.EvtDevicePrepareHardware = Bus_EvtDevicePrepareHardware; WdfDeviceInitSetPnpPowerEventCallbacks(DeviceInit, &amp;pnpPowerCallbacks); .... // WdfDeviceCreate();&#125;NTSTATUS Bus_EvtDevicePrepareHardware(IN WDFDEVICE Device, IN WDFCMRESLIST ResourcesRaw, IN WDFCMRESLIST ResourcesTranslated)&#123; // use WdfCmResourceListGetCount(ResourcesRaw) to get the number of resources. // use WdfCmResourceListGetDescriptor(ResourcesRaw, i) to get the i-th PCM_PARTIAL_RESOURCE_DESCRIPTOR. // use descriptor-&gt;Type to determine the resource type (CmResourceTypePort or CmResourceTypeInterrupt or something else). // save the gethered resources to the DEVICE_EXTENSION structure // that you previously defined.&#125; When enumerating the subdevices, the bus device’s ResourcesQuery callback and ResourceRequirementsQuery callback will be called.The callback registration should also before the invocation of WdfDeviceCreate of the PDO. 1234567891011121314151617181920212223242526EVT_WDF_DEVICE_RESOURCES_QUERY Bus_EvtDeviceResourcesQuery;EVT_WDF_DEVICE_RESOURCE_REQUIREMENTS_QUERY Bus_EvtDeviceResourceRequirementsQuery;#ifdef ALLOC_PRAGMApragma alloc_text (PAGE, Bus_EvtDeviceResourcesQuery);pragma alloc_text (PAGE, Bus_EvtDeviceResourceRequirementsQuery);WDF_PDO_EVENT_CALLBACKS pdoCallbacks;WDF_PDO_EVENT_CALLBACK_INIT(&amp;pdoCallbacks);pdoCallbacks.EvtDeviceResourcesQuery = Bus_EvtDeviceResourcesQuery;pdoCallbacks.EvtDeviceResourceRequirementsQuery = Bus_EvtDeviceResourceRequirementsQuery;WdfPdoInitSetEventCallbacks(pDeviceInit, &amp;pdoCallbacks);NTSTATUS Bus_EvtDeviceResourcesQuery(IN WDFDEVICE Device, IN WDFIRESLIST Resources)&#123; // assign the subdevice resources&#125;NTSTATUS Bus_EvtDeviceResourceRequirementsQuery(IN WDFDEVICE, IN WDFIORESREQLIST IoResourceRequirementsList)&#123; // assign the subdevice resources&#125;// note that: the logic of the above two functions are almost the same For Sub-device Driverthe subdevice should register the callback funtion prepareHardware like the bus driver, then do the additional step: 1234567891011121314151617181920EVT_WDF_DEVICE_REMOVE_ADDED_RESOURCES Bus_EvtDeviceRemoveAddedResources;NTSTATUS xxxEvtDevicdAdd(IN WDFDRIVER Driver, IN PWDFDEVICE_INIT DeviceInit)&#123; .... WDF_FDO_EVENT_CALLBACKS fdoCallbacks; WDF_FDO_EVENT_CALLBACKS_INIT(&amp;fdoCallbacks); fdoCallbacks.EvtDeviceRemoveAddedResources = Bus_EvtDeviceRemoveAddedResources; WdfFdoInitSetEventCallbacks(DeviceInit, &amp;fdoCallbacks); ....&#125;NTSTATUS Bus_EvtDeviceRemoveAddedResources(IN WDFDEVICE Device, IN WDFCMRESLIST ResourcesRaw, IN WDFCMRESLIST ResourcesTranslated)&#123; // just use WdfCmResourceListRemove(ResourcesRaw, i) and WdfCmResourceListRemove(ResourcesTranslated, i) // to remove the subdevice's i-th resource so that the bus device will not use the resources.&#125; inf example123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110;; test.inf;整个配置文件安装成功后会在注册表生成一个实例子健 具体位置为：HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Enum;--------- Version Section ---------------------------------------------------[Version];可以是$Chicage$、$Windows NT$(含有一个空格)、$Windows 95$(含有一个空格)之一，定界符$必不可少，且这些串是不分大小写的。;如果Signature的值不是这些有效的串之一，该INF文件就被认为无效Signature=&quot;$WINDOWS NT$&quot; ;INF文件的提供者Provider=drsn_Device ;INF文件的版本信息，时间和版本不变的情况下，修改了SYS文件，重新安装INF文件是看不到SYS变化的;因为系统已经存根了此版本的INF和SYS,它会直接加载已有的文件,调试SYS特别要主要这个问题;如果使用VS2012编译,它会自动帮你填写这里,比较省心DriverVer=08/31/2013,8.33.48.258 ;如果设备是一个标准类别，使用标准类的名称和GUID 否则创建一个自定义的类别名称，并自定义它的GUID;自定义的类别在注册表中 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Class\\ 有显示Class=drsnDevice ClassGuid=&#123;BDC0EAC4-AC4B-46af-82EA-C4958B686515&#125; ;--------- SourceDiskNames and SourceDiskFiles Section -----------------------;这里两项的设置效果是 加载INF当前目录下的SYS文件[SourceDisksNames] 1 = %DiskName%,,, [SourceDisksFiles]Name_Files_Driver = 1,, ;--------- ClassInstall/ClassInstall32 Section -------------------------------;如果不是标准类别设备，这里的配置必须的[ClassInstall32] Addreg=Class_AddReg;对应的注册表是 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Class\\[Class_AddReg] HKR,,,,%DeviceClassName% HKR,,Icon,,&quot;-5&quot; ;--------- DestinationDirs Section -------------------------------------------;把文件呢复制到相应的目录下，在win2000及其以后系统，12表示%windir%/system32/drivers ;win98中12表示%windir%/system/IoSubsys 所以为了兼容大家都写成10,System32\\Drivers[DestinationDirs] Name_Files_Driver = 12 ;--------- Manufacturer and Models Sections ---------------------------------- ;这里是设置模型相关的选项，注意这里VS默认生成的标准设备的配置 如：%ManufacturerName%=Standard,NT$ARCH$;如果不是标准类别设备这里必须修改，要不然最后加载的时候会出现259错误[Manufacturer]%ManufacturerName%=Mfg0 ;这里是模型节的节名，和硬件ID 这个ID可以自定义 [Mfg0]%DeviceDesc%=SysInstall, PCI\\VEN_8888&amp;DEV_8888 ;---------- DDInstall Sections -----------------------------------------------;这里需要注意WIN2000及其以上的系统这里有个.NT，如果是98这里是[SysInstall]，必须要正确设置[SysInstall.NT] CopyFiles=Name_Files_Driver AddReg=Install_NT_AddReg;这里的drsnWDM是注册表中的服务名 具体地址是 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services[SysInstall.NT.Services] Addservice = drsnWDM, 0x00000002, Sys_AddService ;服务的具体选项[Sys_AddService] DisplayName = %SvcDesc% ServiceType = 1 ; SERVICE_KERNEL_DRIVER StartType = 3 ; SERVICE_DEMAND_START ErrorControl = 1 ; SERVICE_ERROR_NORMAL ;这个地方虽然和[Name_Files_Driver]相同但是不能引用，所以只能照实来写ServiceBinary = %12%\\test.sys [Install_NT_AddReg] HKLM, &quot;System\\CurrentControlSet\\Services\\drsnWDM\\Parameters&quot;,\\ &quot;BreakOnEntry&quot;, 0x00010001, 0 ; --------- Files (common) ------------- ;sys文件名 便于配置文件其它地方使用[Name_Files_Driver] test.sys;--------- Strings Section --------------------------------------------------- ;字符串设置 便于配置文件其它地方使用[Strings] ProviderName=&quot;drsn&quot; ManufacturerName=&quot;drsn soft&quot;DiskName=&quot;test Source Disk&quot;DeviceDesc=&quot;test protect&quot; SvcDesc=&quot;drsn&quot; DeviceClassName=&quot;drsn_Device&quot;","tags":[]},{"title":"Windows Embedded","date":"2015-11-22T03:23:28.000Z","path":"2015/11/22/Windows-Embedded/","text":"自定义 Shell默认情况下，构建 XPE 时，我们都选择 Explorer Shell，可如果我们想要在进入系统后，默认打开其他的应用程序呢？这里可以使用Component Designer 来建立自定义 Shell 组件，之后在检查依赖性的时候，就可以只选择我们自定义的 Shell 而不选择 Explorer Shell 了。 最小化 XPE在最小化 XPE 的过程中，类似 Networking 这样的组件，虽然我们用不到，可是也需要添加到系统中，否则无法通过依赖性检查。 EWF (Enhanced Write Filter)介绍EWF 是 Windows 提供的一种针对磁盘分区的保护机制，将所有对分区的更改都只保留在内存中，并不向磁盘进行任何的数据写入，在系统重启之后，分区能够保持未更改的状态，我们可以用这种方法来防病毒。 XPE 下 EWF 的安装 在 Target Designer 中添加一下四个组件： EWF NTLDR Enhanced Write Filter Enhanced Write Filter API (EWF API) EWF Manager Console application 需要删除一个组件： NT Loader 在 Enhanced Write Filter 组件的 Settings 中，做如下设定： 取消 Start EWF Enabled 勾选 在 Partition Number 一项中填写合适的值，默认是 1，表示保护第一个分区（即 C 盘），用户可以根据实际情况进行选择 Overlay Type 一项，选择 RAM 检查组件依赖性并编译系统镜像 使用FBA 之后的第一次启动，如果在命令行中用 ewfmgr : 来查看现在的 EWF 保护情况，会出现错误，需要将下面的代码制作成 .reg 注册表文件，双击运行并重启系统，之后再用命令 ewfmgr : 查看 EWF 的保护状态，就会给出正常的结果了，当前的状态应该是 Enable。 12345678910111213141516Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\ewf]&quot;ErrorControl&quot;=dword:00000001&quot;Group&quot;=&quot;System Bus Extender&quot;&quot;Start&quot;=dword:00000000&quot;Type&quot;=dword:00000001[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Class\\&#123;71A27CDD-812A-11D0-BEC7-08002BE2092F&#125;]&quot;UpperFilters&quot;=&quot;Ewf&quot;[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\ewf\\Parameters][HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\ewf\\Parameters\\Protected][HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\ewf\\Parameters\\Protected\\Volume0]&quot;VolumeID&quot;=&quot;&#123;1EA414D1-6760-4625-8CBE-4F9F85A48E15&#125;&quot;&quot;Type&quot;=dword:00000001&quot;ArcName&quot;=&quot;multi(0)disk(0)rdisk(0)partition(1)&quot; 注意：ArcName 最后的 partition(n) 应该和 Enhanced Write Filter 中 Partition Number 的值保持一致。 采用上述系统 Ghost 出来的新系统，需要正常启动两次，才能使用 EWF 功能。 注：Ghost 软件应使用 DOS 下的纯净 Ghost，Laomaotao 下的 Ghost 工具会在镜像里面添加广告文件。 常用命令123456781. 查看状态ewfmgr &lt;n&gt;:2. 启用保护，重启后生效ewfmgr &lt;n&gt;: -enable3. 撤销保护，立即生效ewfmgr &lt;n&gt;: -commitanddisable -live HORM (Hibernate Once Resume Many)HORM 是 EWF 当中的一项技术，在系统首次启动后，如果进入休眠状态，之后的关机，无论是正常关机还是异常关机，都会直接从休眠状态中恢复回来，这样可以显著缩短系统启动的时间。","tags":[]},{"title":"English Translation","date":"2015-11-22T03:08:40.000Z","path":"2015/11/22/English-Translation/","text":"符号的英文写法 符号 英文 ` backquote ~ tilde ! exclam @ at # hash (英)，pound (美)，音乐里作 sharp，如 C# $ dollar % percent ^ caret &amp; ampersand * asterisk，star (美)，数学公式中作 multiply ( parenleft，opening parentheses ) parenright，closing paretheses - minus，hyphen _ underscore + plus = equal [ bracketleft，opening bracket ] bracketright，closing bracket { braceleft } braceright ; semicolon : colon ‘ quote “ doublequote / slash \\ backslash , comma &lt; less &gt; greater . period ? question ＜ is less than ＞ is more than ≮ is not less than ≯ is not more than ≤ is less than or equal to ≥ is more than or equal to ‘ apostrophe － dash ‰ per mille ∞ infinity ∵ since; because ∴ hence … ellipsis ‖ parallel ～ swung dash △ triangle § section，division ⊥ perpendicular to ∪ union of ∩ intersection of ∫ the integral of ∑ summation of ≠ is not equal to ≡ is equivalent to ≌ is equal to or approximately equal to Translation 素质教育 essential-qualities-oriented education 浅谈 brief/preliminary discussion 多元化 pluralism 第三方的 third-party 航海的 nautical 固定资产 fixed assets 阐述 expound 高职 higher vocational college 中职 secondary vocational college 东移 shift eastwards 以…为例 exemplified by 行业协会 gild 酒店管理 hospitality management 示范校 demonstrative school 校园文化 campus culture 试验班 experimental class 身心 body and mind 和谐稳定的 harmonious and stable 理智和情感 intellect and emotion 人文的 humanistic 生活教师 life teacher 财经 finance and economics 创新精神 creativity of the mind 动手能力 hands-on abilities 社会主义核心价值观 core socialist values 继续教育 continuing education 协同办公系统 cooperative office system 持久的生命力 lasting vitality 伴随性 concomitant 影视 film-video 大数据 big data 电子商务 E-commerce 导热 thermal conductivity 阻燃 flame retardant 有机硅 organosilicone 灌封胶 pouring sealant 填料 stuffing 现浇混凝土板式楼梯 cast-in-place concrete slab stair 结构施工图 structural working drawing 平法识图 plane drawings recognition 需求分析 requirement analysis 流程图 flow chart 二次开发 re-development 标准件 standard parts 钣金 sheet metal 人机交互 human-computer interaction 曲面 curved surface 创业 set up in business 人生观价值观 view on life and values 快速阅读 speed reading 略读 skim 跳读 skip 自动变速器 automatic transmission 故障诊断 breakdown dignosis 汽车底盘 automobil chassis 电控系统 electric control system 治安案件查处 investigation and treatment of social security cases 案例教学 case-based education","tags":[]},{"title":"二进制乘数词头","date":"2015-11-22T03:04:54.000Z","path":"2015/11/22/Numeral-System/","text":"不同进制对比 名称 符号 二进制 十六进制 十进制 kibi Ki 2^10 0x400 >10^3 mebi Mi 2^20 0x10 0000 >10^6 gibi Gi 2^30 0x4000 0000 >10^9 tebi Ti 2^40 0x100 0000 0000 >10^12 pebi Pi 2^50 0x4 0000 0000 0000 >10^15 exbi Ei 2^60 0x1000 0000 0000 0000 >10^18 zebi Zi 2^70 0x40 0000 0000 0000 0000 >10^21 yobi Yi 2^80 0x1 0000 0000 0000 0000 0000 >10^24 二进制与十进制次头误差率对比 名称 Bin/Dec Dec/Bin 举例 百分比 kilobyte : kibibyte 1.024 0.976 100 kB ≈ 97.6 KiB +2.4% 或 -2.3% megabyte : mebibyte 1.049 0.954 100 MB ≈ 95.4 MiB +4.9% 或 -4.6% gigabyte : gibibyte 1.074 0.931 100 GB ≈ 93.1 GiB +7.4% 或 -6.9% terabyte : tebibyte 1.100 0.909 100 TB ≈ 90.9 TiB +10% 或 -9.1% petabyte : pebibyte 1.126 0.888 100 PB ≈ 88.8 PiB +12.6% 或 -11.2% exabyte : exbibyte 1.153 0.867 100 EB ≈ 86.7 EiB +15.3% 或 -13.3% zettabyte : zebibyte 1.181 0.847 100 ZB ≈ 84.7 ZiB +18.1% 或 -15.3% yottabyte : yobibyte 1.209 0.827 100 YB ≈ 82.7 YiB +20.9% 或 -17.3%","tags":[]},{"title":"常用文件系统可支持的最大单文件大小","date":"2015-11-22T03:01:50.000Z","path":"2015/11/22/Max-File-Size-of-Common-File-Systems/","text":"类型 单文件大小上限 EXT4 16 TiB NTFS 16 TiB minus 64 KiB FAT32 4 GiB minus 1 B ExFAT 64 ZiB","tags":[]},{"title":"跨平台计算机性能测试套件","date":"2015-11-22T02:52:13.000Z","path":"2015/11/22/System-Performance-Test/","text":"CPU 性能测试 [UPDATE]Stress + htop 简介Phoronix Test Suite 是一款跨平台（Linux/Mac/Windows）的计算机性能测试软件，测试种类共分为五大类： System Memory Processor Graphics Disk 以上每一个分类里面都有若干个工具，我们是用某个分类里的某个工具来对相关性能进行测试的，下面列出每个分类里面的工具： Systemhint, idle, juliagpu, mandelbulbgpu, mandelgpu, nexuiz-iqc, pgbench, pybench, smallpt-gpu, sunflow, xplane9-iqc MemoryStream Processorblake2, bork, botan, build-apache, build-php, bullet, byte, c-ray, clomp, compress-7zip, compress-gzip, dcraw, ffmpeg, fhourstones, graphics-magick, himeno, java-scimark2, jgfxbat, john-the-ripper, mafft, mencoder, minion, mrbayes, openssl, polybench-c, primesieve, sample-program, scimark2, stockfish, sudokut, tachyon, tscp Graphicsapitest, corebench, j2dbench, nexuiz, openarena, qvdpautest, unvanquished, urbanterror, xonotic, xplane9 Diskblogbench, compilebench, postmark, tiobench, unpack-linux 注：这个列表不是很全，没有列出的就是不能用的。 安装将下载好的安装包，现在直接从 phoronix-test-suite-packages 里面提取即可，放到 /path/to/phoronix-dir/download-cache 目录下，然后运行下面的命令进行安装， 1$ phoronix-test-suite install pts/&lt;tool-name&gt; 使用1$ phoronix-test-suite run &lt;tool-name&gt; 备份如果手头没有下载好的 package 安装包，执行安装命令就会直接从网络上面下载工具并安装，之后，如果我们想要把下载好的包提取出来做个备份，只需要执行下面的命令即可， 1$ phoronix-test-suite make-download-cache 命令成功执行后，我们就可以从 /path/to/phoronix-dir/download-cache 目录中找到了。 以上就是基本的介绍和使用指南，hope you enjoy it～","tags":[]},{"title":"Programming","date":"2015-11-22T02:47:47.000Z","path":"2015/11/22/Programming/","text":"读取文件内容，每次处理一行12345#!/bin/bashwhile read &lt;line&gt;do echo $&lt;line&gt; # or something else you want to dodone &lt; &lt;filename&gt; 同时打开两个新终端并执行程序源代码 12345678910111213141516171819202122232425262728293031/* * test.c */ #include &lt;pthread.h&gt;void* func1(void* args)&#123; system(\"gnome-terminal -e ./test1\"); return NULL;&#125;void* func2(void* args)&#123; system(\"gnome-terminal -e ./test2\"); return NULL;&#125;int main()&#123; pthread_t thread1, thread2; pthread_create(&amp;thread1, NULL, func1, NULL); pthread_create(&amp;thread1, NULL, func1, NULL); pthread_join(thread1, NULL); pthread_join(thread2, NULL); return 0;&#125; 生成可执行程序 1$ gcc test.c -o test -lpthread 为新线程传递参数源代码 123456789101112131415161718192021222324252627282930313233#include &lt;stdio.h&gt;#include &lt;pthread.h&gt;struct thread_args &#123; int arg1; int arg2;&#125;;/* 无论是否传递参数，线程所执行的函数都应该具有如下声明 */void* func(void* args)&#123; struct thread_args* myargs = (struct thread_args*) args; printf(\"arg1 is %d, arg2 is %d\\n\", myargs-&gt;arg1, myargs-&gt;arg2); return NULL;&#125;int main()&#123; pthread_t mythread; struct thread_args myargs; myargs.arg1 = 100; myargs.arg2 = 200; /* 必须以结构体的形式，将参数传递给新线程 */ pthread_create(&amp;mythread, NULL, func, &amp;myargs); pthread_join(mythread, NULL); return 0;&#125; warning: address of stack memory…如果我写了一个返回指针的函数，而在函数体的 return 后面返回的是变量的地址，编译器就会给出警告，说这样是不安全的，所以我们再增加一个指针变量，将那个变量的地址赋给指针变量，最后再返回就好了。 即：应返回指针，而不是变量地址。 Simple Intro to GDB123456789101112131415161718// this is a really simple program called fact.c // to calculate the factorial of 4// the expecting result is 24#include &lt;stdio.h&gt;int main()&#123; int i, j; for (j=1; j&lt;5; j++) &#123; i = i * j; &#125; printf(\"the result is %d\\n\", i); return 0;&#125; 123456# we use gcc to compile it$ gcc -o fact fact.c# then run it$ ./factthe result is 0# that is not what we expeted! So we use gdb to check what is going on~~~ To use gdb, we should add -ggdb to the gcc command line to include information for debugging. 1$ gcc -ggdb -o fact fact.c Then, We just run the following command to start gdb. 1$ gdb ./fact and you will get a prompt like this, 1(gdb) Next, type r or run and hit enter, you will get the entire program running just like what running the fact executable. 1(gdb) r What if we want to stop the program somewhere, just type b fact.c:5 or break fact.c:5 to stop the program at line 5 in the source code, or type b fact.c:main to stop the program from the very beginning. 1(gdb) b fact.c: main If you want to see the source code to determine which line you should break, just type l to show a piece of the source code, then another l, you will get another piece, also l 12 will get you to the line 12. 1(gdb) l 12 Suppose now you are at the for loop line, and you want to check the value of i, you can simply type p i or print i to print the current value of the variable i, further more, if you want to show all the variables, just type info locals. 1(gdb) info locals If you want to change the value of some variable, say change the value of i from nothing to 1, you can type p i = 1, then hit enter, then c or continue to continue the rest of the program or n to run just the next line of code, if we want to execute the program line by line, you can save you typing by just hit enter, the enter will execute the previous command which is n. 1(gdb) p i = 1 If you want to quit the gdb, just type q or quit. 1(gdb) q C redifinition error如果工程中有多个头文件，并且有的会互相包含，那么有可能会在编译的时候报出重复定义的错误，因为有的头文件被包含了不止一次，可以通过如下方式解决这个问题： 123456789#ifndef __SOMEFILE\\_H__#define __SOMEFILE\\_H__/* * * things in the file * */#endif 头文件只会在变量未定义的情况下被包含一次，这样就很好的避免了重复定义的错误。 如何编写并使用 DLL生成 DLL首先在 VC++ 6.0 中新建 Win32 Dynamic-Link Library 工程 testDLL，然后新建如下两个文件，EXPORT.h 和 testDLL.cpp。 12345678910111213141516171819202122/* * EXPORT.h */#ifdef EXPORTING_DLLextern \"C\" __declspec (dllexport) int add(int a, int b);#elseextern \"C\" __declspec (dllimport) int add(int a, int b);#endif/* * testDLL.cpp */#define EXPORTING_DLL#include \"EXPORT.h\"int add(int a, int b)&#123; return a + b;&#125; 编译之后，会生成两个文件 testDLL.dll 和 testDLL.lib。 使用 DLL 新建一个 Win32 Console Application 工程 test，将 testDLL.lib 添加到Project->Settings->Link 选项卡下的 Object/library modules 中。 将刚才生成的 testDLL.dll，testDLL.lib 以及 EXPORT.h 复制到 test 的工程目录中。 在 test 工程中新建文件 test.c 并添加如下内容 1234567891011/* * test.c */#include \"EXPORT.h\"int main()&#123; printf(\"the result of 1+2 is %d\\n\", add(1, 2)); return 0;&#125; 使用 vs2013 需要注意的地方让 vs2013 生成兼容 XP 的应用程序默认是不兼容 XP 的。 右键单击工程-&gt;Properties-&gt;General-&gt;General-&gt;Platform Toolset: Visual Studio 2013 - Windows XP (v120_xp) 字符集设置默认情况下，使用双引号字符串会报错，采用下面的方法避免这个错误的产生。 右键单击工程-&gt;Properties-&gt;General-&gt;Project Defaults-&gt;Character Set: Not Set/Use Multi-Byte Character Set 动态库使用问题右键单击工程-&gt;Properties-&gt;Linker-&gt;Input-&gt;Additional Dependencies，然后添加自己的 DLL。 修改 MFC 默认工程的图标ico 文件一般可以通过 png 文件转换得到。直接将做好的 ico 文件替换到工程中的 res 目录，然后重新编译即可。 DeviceIoControl如果想要使用 IOCTL 的特定控制字，需要调用 DeviceIoControl 函数，该函数需要头文件 windows.h。 astyle Code Formatting Toolastyle 是一个开源的代码格式化工具，现在将常用选项列在下面： 选项 描述 –style=kr / -A3 采用 K&amp;R 代码格式 –preserve-date / -Z 不改变文件修改时间 –unpad-paren / -U 将括号内侧空格去掉 –pad-header / -H 在 if/else 等后面添加空格 –align-pointer=type / -k1 将指针前的星号和指针类型连在一起 –align-reference=name / -W3 将&amp;符号同所引用的变量连在一起 ｜ –convert-tabs / -c 将 tab 转换为 space –indent=spaces=4 / -s4 采用空格进行缩紧，一个单位为 4 个空格 –break-blocks / -f 在不相关的代码块间插入空格 –add-brackets / -j 在单行条件代码外添加大括号 –errors-to-stdout / -X 将错误输出到标准输出上 referencing an external css file1&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheet.css\"\\&gt; module object has no attribute ‘OrderedDict’OrderedDict 在 Python2.7 才开始加入了该支持，所以如果 Python 的当前版本低于 2.7，就会报这个错误。","tags":[]},{"title":"Linux","date":"2015-11-22T02:05:04.000Z","path":"2015/11/22/Things-Need-to-Know-about-Linux/","text":"Ubuntu 登录及注销时自动执行的脚本策略登录时 ~/.bash_profile ~/.bash_login ~/.profile 按顺序查找，只执行最先找到的那个脚本。 注销时~/.bash_logout Hash sum mismatch error while updating Ubuntu12sudo rm -rf /var/lib/apt/lists/*sudo apt-get update Ubuntu 切换到命令行模式的三种方法 sudo init 1; 切换到其他终端：crtl + alt + Fn sudo /etc/init.d/gdm stop Authentication failureUbuntu 默认不开启 root 帐户，如果使用了 su 命令的话，会提示 authentication failure。 这时，需要用 1sudo passwd root 为 root 帐户设置密码。 系统自动发送串口测试指令 (AT+GCAP)在正常加载驱动后，Ubuntu 的 ModemManager 会自动对串口进行测试，那么就会发现，还没有启动串口就已经有数据从串口发送出去了，要避免这种情况的发生，需要做下面的步骤，将 ModemManager 功能禁用掉。 123cd /usr/share/dbus-1/system-servicesmv org.freedesktop.ModemManager.service org.freedesktop.ModemManager.service.disabledsudo reboot Remove unused kernel images123uname -rdpkg --list | grep linux-imagesudo apt-get purge linux-image-x.x.x.x-generic unknown filesystem: grub rescue ls 列出所有硬盘分区 ls (hd0,x)/ 检查分区中是否存在安装的系统 如果找到分区，则: set root=(hd0,x) set prefix=(hd0,x)/boot/grub insmod /boot/grub/i386-pc/normal.mod normal 正常情况下应该进入到启动列表，然后按 c 进入 grub 命令行： set root=(hd0,x) linux /boot/vmlinuz-xxx root=/dev/sda(y) initrd /boot/initrd-xxx boot 如果成功的话就能够正常进入 ubuntu系统了，进入系统后，打开 terminal： 1234sudo grub-install /dev/sdasudo depmodsudo update-grubsudo reboot vim 方向键变字母的问题 方法一 1sudo apt-get remove vim-common; sudo apt-get install vim 方法二 123sudo gedit ~/.vimrc添加set nocompatible Install Boot-Repair on Ubuntu123sudo add-apt-repository ppa:yannubuntu/boot-repairsudo apt-get updatesudo apt-get install boot-repair configure: error: C++ preprocessor “|lib|cpp” fails sanity check在编译软件时，如果出现上面错误，在 centos 下运行 1yum install gcc-c++ 即可。 grep lines containing tab characterUsing a regular form to grep lines in file.txt containing tab character, be careful about the $ sign before the ‘\\t’ expression. 1grep $'\\t' file.txt Using perl script to grep lines in file.txt containing tab character, -P (uppercase) option means perl. 1grep -P '\\t' file.txt Grep lines in file.txt not containing tab character, -v option means reverse. 1grep -v $'\\t' file.txt grep+find 指定文件范围查找1find . -i name \"*.c\" -exec grep \"hello\" &#123;&#125; \\; Kernel Panic - not syncing: VFS: Unable to mount root fs on unknown-block(0,0)12sudo initramfs -u -k versionsudo update-grub2 安装 Nvidia 显卡驱动 禁用 SELinux 将 “blacklist nouveau” 添加到 /etc/modprob.d/blacklist.conf 文件末尾 将 /etc/grub.conf 中的 “nouveau.modeset=0” 去掉 执行 init 3 执行 xxx.run 驱动安装脚本 备份 /etc/X11/xorg.conf 后，将该文件删掉 重新启动系统。 ssh-keygen 的使用方法为了让两个 Linux 机器之间使用 ssh 不需要用户名和密码，采用数字签名 RSA 或者 DSA 来完成这个操作。 模型分析假设 A (192.168.20.59) 为客户机器，B (192.168.20.60) 为目标机。 要达到的目的： A 机器 ssh 登录 B 机器无需输入密码； 加密方式选 rsa 或者 dsa 均可以，默认是 dsa。 具体操作流程单向登陆的操作过程（能满足上边的目的） 登录 A 机器 ssh-keygen -t [rsa|dsa]，将会生成密钥文件和私钥文件 id_rsa, id_rsa.pub 或 id_dsa, id_dsa.pub 将 .pub 文件复制到 B 机器的 .ssh 目录， 并 cat id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys 大功告成，从 A 机器登录 B 机器的目标账户，不再需要密码了。（直接运行 ssh 192.168.20.60） 双向登陆的操作过程ssh-keygen 做密码验证可以使在向对方机器上 ssh, scp 不用使用密码。具体方法如下: 在两个机器上互相执行上面的 1～3 步 设置文件和目录权限： 12chmod 600 authorized_keyschmod 700 -R .ssh 要保证 .ssh 和 authorized_keys 都只有用户自己有写权限，否则验证无效。 Ubuntu 10.04 如何进入 grub 命令行Ubuntu 从 10.04 开始使用 GRUB2.0 版本，默认安装情况下 grub2 启动菜单是隐藏的，除非您改动了 /etc/default/grub 中的设置。 打开 grub2 启动菜单的方法： 在开机启动时一直按 Shift 键，直到 grub2 启动菜单出现，这时候可以按上下方向键选择一个项目，或者直接按 ‘c’ 进入命令行模式。 命令行下查找和替换文本的方法1sed -i 's/&lt;old-string&gt;/&lt;new-string&gt;/g' `grep &lt;old-string&gt; -rl .` Getting part of a stringGetting the “File” part 1echo \"File.txt\" | cut -d\\. -f1 Getting the “txt” part 1echo \"File.txt\" | cut -d\\. -f2 -fn stands for the nth field -d. means we use dot character as delimiter. cut command uses tab as its delimiter by default. -s option means only shows the results contains the delimiter 安装 Grub12mount /dev/sdaX /mntgrub-install --root-directory=/mnt /dev/sdX gawk需要系统中有 troff 1234./configuremakecd doc/make awkward.pdf wget下载 https 链接需要添加 –no-check-certificate 选项 在配置文件中添加代理编辑 ~/.wgetrc 文件 1234http_proxy=http://127.0.0.1:8088https_proxy=http://127.0.0.1:8088ftp_proxy=http://127.0.0.1:8088use_proxy=off (默认不开启代理) 之后可在命令中用 -Y on 来手动开启代理。 BochsUbuntu 环境下，默认的配置文件为 /etc/bochs-init/bochsrc. 将配置文件中的 1romimage: file=$BXSHARE/BIOS-bochs-latest, address=0xf0000 改成 1romimage: file=$BXSHARE/BIOS-bochs-latest 即可。 diff 的四种格式解读123456789101112# 1. 传统格式diff &lt;before&gt; &lt;after&gt;# 2. 上下文格式diff -c &lt;before&gt; &lt;after&gt;# 3. 合并格式diff -u &lt;before&gt; &lt;after&gt;# 4. git diff# 这种格式不需要文件位于 git 仓库内git diff &lt;before&gt; &lt;after&gt; 几个常用的 RPM 命令1234567891. 查询特定的 rpm 包是否已经安装rpm -q xxx.rpm2. 列出系统中所有的 rpm 包，并在中间按关键字查找rpm -qa | grep xxx3. 删除制定的 rpm 包rpm -e xxx.rpm注：如果有依赖关系的话，默认是不能删除的，这时就要用 yum remove 来进行卸载 基础命令的进度监控正常情况下，cp 命令是不会显示进度的，如果你打算拷贝一个 20 GB 的文件，天知道要等多久，心里真没底啊。。。。咋办呢？ 下面是方法一： 干脆就不用 cp 命令了，改用下面这个： 1$ rsync -av --progress &lt;from&gt; &lt;to&gt; 但是，别的命令咋办呢，比如 mv？正好在 github 上面有这个项目，Coreutils Viewer，下载之后 make &amp;&amp; make install 就可以了，下面给出使用方法： 1$ cp &lt;from&gt; &lt;to&gt; &amp; cv -m 注意：上面的命令仅仅用了一个 &amp;，用来让 cp 命令在后台执行，而在前台执行 cv -m 命令，目的就是用来监控 cp 的进度，非常方便。 Ubuntu 内核开发环境搭建配置 OS：ubuntu-12.04.4-desktop-i386 运行环境：虚拟机。内存分配 1GB，CPU 分配一个核心 安装配置：磁盘分配为系统默认，默认选择 “安装时下载” 和 “安装第三方软件“ 系统自带内核：3.11.0-15 需要编译的内核：linux-3.11.tar.gz （从 kernel.org 下载） 需要 apt-get 安装组件 build-essential, libncurses-dev, kernel-package 内核编译及安装步骤12345678910cd ~/Desktop; tar zxf linux-3.11.tar.gz; cd linuxmake mrpropermake menuconfig# 界面出来之后直接选择退出，然后选择保存cp /boot/xxx-config .configmake -j&lt;n&gt; #单核 n=1，双核 n=2# 接下来会让你确认一个内核选项，是关于 vesa 的，选择 yes 即可# 然后就进入了编译过程，这里需要漫长的等待，根据上面的虚拟机配置，预计时间为 30 ~ 60 分钟sudo make modules_installsudo make install 新内核使用及相关问题重启后如果找不到 Grub2 启动菜单，需要在启动时按住 Shift 键，然后在菜单上找到 Previous 选择新内核进入系统后，需要重新安装 VMware Tools，否则无法同主机进行文件共享。编译驱动时，如果提示 popt.h: No such file or directory，需要 apt-get 安装 libpopt-dev。 如何验证当前系统是 32 位还是 64 位方法一 1$ getconf LONG_BIT 方法二 1$ file /bin/ls How to Check and Use Serial Ports under LinuxCheck the System Initialization for Serial Ports1$ dmesg | grep tty Check What Serial Ports Your Linux Has1$ setserial -g /dev/ttyS[0123] 串口的简单使用 查看串口设备信息 1$ dmesg | grep tty 查看串口驱动信息 1$ cat /proc/tty/drivers/serial 读写 1234# read$ cat /dev/ttyS1# write$ echo 12345 &gt; /dev/ttyS1 添加删除用户 注销旧用户 1$ pkill -u &lt;username&gt; or 用 ps 命令找到用户登录的终端，然后关闭对应的进程 删除旧用户 1$ userdel &lt;username&gt; 添加新用户 12345$ groupadd &lt;groupname&gt;$ useradd -g &lt;groupname&gt; -d /home/&lt;username&gt; -s /bin/bash# 将用户加入到新组，并不破坏原来的组$ usermod -a -G &lt;groupname&gt; &lt;username&gt; 运行软件时提示 GLIBCXX_3.4.15 not found我打算在 fedora 14 上安装使用 Qt5.4.1，能够正常安装，但是打不开 QtCreator，提示 /usr/lib/libstdc++.so.6: GLIBCXX_3.4.15 not found，在官网上下载了 fedora 15 的 libstdc++-4.6.0-6.fc15.i686.rpm，直接安装的话，会和现有的组件起冲突，可以换另外一种方式： 1234567891011# 对 rpm 进行解压缩$ rpm2cpio libstdc++-4.6.0-6.fc15.i686.rpm | cpio -div# 解压出来是一个 usr 文件夹$ cd usr/lib/# 可以通过下面的命令查看当前动态库是否包含 GLIBCXX_3.4.15$ strings libstdc++.so.6.16 | grep GLIBCXX_3.4.15$ sudo cp libstdc++.so.6.16 /usr/lib/; cd /usr/lib# 删除旧的链接并重新新建$ sudo rm libstdc++.so.6$ sudo ln -s libstdc++.so.6 libstdc++.so.6.16 修改用户信息1$ chfn &lt;username&gt; Apache 允许外部主机访问如果安装的是 xampp，在 Apache2.4 以后的版本，需要编辑 /opt/xampp/etc/extra/httpd-xampp.conf，找到 LocationMatch，将里面的 Require local 替换为 Require all granted 即可。 网络配置1$ ifconfig eth0 192.168.1.120 netmask 255.255.255.0 ELDK 安装ELDK 是用于生成 u-boot 的开发套件，目前的最新版本是 5.6 下载针对 PowerPC 的镜像 eldk-5.6-powerpc.iso，文件大小 5GB 左右。 123456789101112131415161718$ sudo mount -t iso9660 -o loop eldk-5.6-powerpc.iso /mnt$ cd /mnt/eldk-5.6/$ sudo ./install.sh -s toolchain powerpc# 接下来安装会有问题，提示不能读取 toolchain 的 tarball 文件，那么我们就来手动安装$ cd /opt/eldk-5.6/powerpc$ sudo mkdir rootfs-minimal$ sudo tar xpf /mnt/eldk-5.6/targets/powerpc/core-image-minimal-generic-powerpc.tar.gz -C rootfs-minimal$ sudo mkdir rootfs-minimal-dev$ sudo tar xpf /mnt/eldk-5.6/targets/powerpc/core-image-minimal-dev-generic-powerpc.tar.gz -C rootfs-minimal-dev$ sudo mkdir rootfs-minimal-mtdutils$ sudo tar xpf /mnt/eldk-5.6/targets/powerpc/core-image-minimal-mtdutils-generic-powerpc.tar.gz -C rootfs-minimal-mtdutils$ sudo mkdir rootfs-minimal-xenomai$ sudo tar xpf /mnt/eldk-5.6/targets/powerpc/core-image-minimal-xenomai-generic-powerpc.tar.gz -C rootfs-minimal-xenomai 设置环境变量1234$ cd /opt/eldk-5.6/powerpc$ source environment-setup-powerpc-linux$ export ARCH=powerpc$ export CROSS_COMPILE=$&#123;TARGET_PREFIX&#125; Ubuntu14.04 安装 Sublime Text 2123$ sudo add-apt-repository ppa:webupd8team/sublime-text-2$ sudo apt-get update$ sudo apt-get install sublime-text Terminal 配色方案文本颜色设为 #708284，背景颜色设为 #07242E Ubuntu 用关键字查询已经安装的软件包1$ sudo dpkg --get-selections | grep xxx update-alternatives 学习笔记［转载］作用概述 为多个功能相同但名称不同的软件起一个共用的名称； 可以让同一个软件的多个版本共存。 Linux 发展到今天，可用的软件已经非常多了。这样自然会有一些软件的功能大致上相同。例如，同样是编辑器，就有 nvi、vim、emacs、nano，而且我说的这些还只是一部分。大多数情况下，这样的功能相似的软件都是同时安装在系统里的，可以用它们的名称来执行。例如，要执行 vim，只要在终端下输入 vim 并按回车就可以了。不过，有些情况下我们需要用一个相对固定的命令调用这些程序中的一个。例如，当我们写一个脚本程序时，只要写下 editor，而不希望要为“编辑器是哪个”而操心。Debian 提供了一种机制来解决这个问题，而 update-alternatives 就是用来实现这种机制的。 参数详解 –display 它使我们可以看到一个命令的所有可选命令 1$ update-alternatives --display editor 可以看到我的机器上的所有可以用来被 editor 链接的命令。 –config 这个选项使我们可以选择其中一个命令程序来作为 editor 1$ update-alternatives --config editor –auto update-alternatives 在一般情况下是由 postinst 和 prerm 这样的安装脚本自动调用的，所以一个 alternative 的状态有两种：自动和手动。每个 alternative 的 初始状态都是自动。如果系统发现管理员手动修改了一个 alternative，它的状态就从自动变成了手动，这样安装脚本就不会更新它了。如果你希望将一个 alternative 变回自动，只要执行代码: 1$ update-alternatives --auto editor –install 1$ update-alternatives --install gen link alt pri [--slave sgen slink salt] ... gen，link，alt，pri 分别在下面解释。如果需要从 alternative，你可以用 –slave。如果你在向一个已经存在的 alternative 组中添加新的 alternative，该命令会把这个 alternative 加入到这个已经存在的 alternative 组的列表中，并用新的可选命令作为新的命令；否则，将会建立一个新的自动的 alternative 组。 –remove 1$ update-alternatives --remove name path 名词解释 general name：这是指一系列功能相似的程序的“公用”名字（包括绝对路径），比如 /usr/bin/editor。 link：这是指一个 alternative 在 /etc/alternative 中的名字，比如 editor，–display，–config 和 –auto 后面跟的都是 link。 alternative：顾名思义，这是指一个可选的程序所在的路径（包括绝对路径），比如 /usr/bin/vim。 优先级：这个比较简单，当然优先级越高的程序越好啦。 主和从alternative：想想看，你将 /usr/bin/editor 链接到了 vim，可是当你执行 man editor 时看到的却是 emacs 的 manpage，你会做何感想呢？这就引出了主和从 alternative 的概念了：当更新主的 alternative 时，从的 alternative 也会被更新。 多个 gcc 共存因为编译软件的需要，Ubuntu 自带的 gcc4.4.1 版本太高，可能需要 gcc3.x，这里选择的是 gcc3.4.4。 下载并安装 deb 安装包选择源码包编译安装可能会出错 下载地址为：http://archive.ubuntu.com/ubuntu/pool/universe/g/gcc-3.4/ gcc-3.4-base_3.4.6-6ubuntu3_i386.deb gcc-3.4_3.4.6-6ubuntu3_i386.deb cpp-3.4_3.4.6-6ubuntu3_i386.deb g++-3.4_3.4.6-6ubuntu3_i386.deb libstdc++6-dev_3.4.6-6ubuntu3_i386.deb 配置目前系统里存在有两个版本的 gcc，缺省值为 gcc4.4.1，这里我们需要改变系统的缺省值 1ls /usr/bin/gcc* -ll 12345rwxrwxrwx 1 root root 21 2009-02-10 17:24 /usr/bin/gcc -&gt; /etc/alternatives/gcc-rwxr-xr-x 1 root root 85552 2008-05-08 18:04 /usr/bin/gcc-3.4-rwxr-xr-x 1 root root 193372 2008-10-11 03:41 /usr/bin/gcc-4.2-rwxr-xr-x 1 root root 16090 2008-05-08 17:58 /usr/bin/gccbug-3.4-rwxr-xr-x 1 root root 2018 2007-06-05 08:59 /usr/bin/gccmakedep 增加 gcc3.4 和 gcc4.3 可选项12$ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.2 40$ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-3.4 30 切换版本到 gcc-3.41$ sudo update-alternatives --config gcc 现有 2 个可选项，它们都提供了 gcc 121 /usr/bin/gcc-3.4*2 /usr/bin/gcc-4.2 要维持缺省值 [*]，按回车键，或者键入选择的编号：1 使用 “/usr/bin/gcc-3.4” 来提供 gcc。 no glxinfo command1$ sudo apt-get install mesa-utils inodeA Brief Intro1 sector = 512B = 0.5KiB 1 block contains a series of sectors, commonly 4KiB (8 sectors). 1 disk consists of a data section and a inode section. 1 inode represents 1 file in the disk, it contains size in Bytes owner ID group ID RWX priviledge timestamp ctime (last inode change time) mtime (last file content change time) atime (last file access time) number of links data section location Files in Linux real file data inode directory file list (use the pair (file_name : inode_num)) inode The maximum number of files (a.k.a the number of inodes) is fixed after the disk formatting. Useful Commandsstatshow the inode information of file1: 1$ stat file1 df -iexamine the inode usage of the system: 1$ df -i dumpe2fscheck the inode size of disk sda in the current system: 1$ sudo dumpe2fs -h /dev/sda1 | gerp \"Inode size\" The result is usually 128B or 256B. ls -icheck the inode number of file1: 1$ ls -i file1 vmware workstation no 3d support on linuxOpen the .vmx file of the virtual machine with a text editor, add the following to the end of the file. 1mks.gl.allowBlacklistedDrivers = \"TRUE\" 简单的网络诊断方法检测网络端口状态1sudo netstat -apn 检测防火墙规则1sudo iptables -L 查看防火墙状态1sudo ufw verbose","tags":[]},{"title":"不同内核版本间的差异","date":"2015-11-22T01:59:02.000Z","path":"2015/11/22/Differences-in-Linux-Kernels-for-Device-Driver-Development/","text":"ioctl and unlocked_ioctl从 2.6.36 版本的内核开始，file_operations 结构体弃用了原来的 ioctl 成员，改用了新的名为 unlocked_ioctl 成员，该成员指向的函数删除了之前函数的第一个参数 inode，所以为了使设备驱动适应多个不同的内核版本，就需要在代码中对内核版本进行判断，进而采用不同的函数的声明： 这里，我们需要包含头文件 。 123456#if LINUX_VERSION_CODE &lt; KERNEL_VERSION(2, 6, 36) static int xxx_ioctl(struct inode *inode, struct file *filp, unsigned int cmd, unsigned long *arg);#else static int xxx_ioctl(struct file *filp, unsigned int cmd, unsigned long *arg);#endif 注意：在函数定义的时候也需要用上面的判断来写函数头。 同样： 12345678910static const struct file_operations xxx_fops = &#123; ...... #if LINUX_VERSION_CODE &lt; KERNEL_VERSION(2, 6, 36) .ioctl = xxx_ioctl, #else .unlocked_ioctl = xxx_ioctl, #endif ......&#125; init_MUTEX_LOCKED and sema_init从 2.6.37 版本的内核开始，init_MUTEX_LOCKED 宏遭到了弃用，我们只能使用 sema_init 来对锁进行操作，具体代码如下： 123456struct semaphore sem;#if LINUX_VERSION_CODE &lt; KERNEL_VERSION(2, 6, 37) init_MUTEX_LOCKED(&amp;sem);#else sema_init(&amp;sem, 0);#endif smp_lock.h and hardirq.h从 2.6.39 版本的内核开始，内核不再包含 smp_lock.h，取而代之的是 hardirq.h。 12345#if LINUX_VERSION_CODE &lt; KERNEL_VERSION(2, 6, 39) #include &lt;linux/smp_lock.h&gt;#else #include &lt;linux/hardirq.h&gt;#endif asm/system.h 文件从 3.4 版本开始，内核不再提供 asm/system.h 文件。","tags":[]},{"title":"Qt","date":"2015-11-22T01:50:23.000Z","path":"2015/11/22/Qt/","text":"在 Qt5 上运行 Qt4 项目 在 pro 文件里，添加 widgets 1QT += core gui widgets 在所有指定文件中，将 #include 改为 #include 在 Ubuntu14.04 上安装和卸载 Qt5.4.1需要安装额外组件一下组件 1$ sudo apt-get install libgl1-mesa-dev g++ 然后设置环境变量，假设 Qt 安装在 /opt/Qt5.4.1 目录下 123# 将下面内容写入 ~/.bash_profile 中，如果没有该文件，请自行创建或通过 /etc/skel 进行创建export PATH=/opt/Qt5.4.1/Tools/QtCreator/bin:$PATHexport LD_LIBRARY_PATH=/opt/Qt5.4.1/lib/qtcreator:$LD_LIBRARY_PATH 保存之后如果想要立即生效，请执行 1$ source ~/.bash_profile 正常打开 QtCreator 后，在配置选项里面的编译器标签页，指定系统编译器位置为 /usr/bin/gcc。 卸载 12$ cd /opt/Qt5.4.1$ sudo ./MaintainanceTool Qt 的 Slots 和 SignalsSlot 相当于处理函数，Signal 相当于事件。如果想要通过Signal向Slot函数传递参数，则必须遵循如下原则，即：Signal 的参数列表中参数的数量一定不能比 Slot 的参数列表中参数的数量少。 UnicodeUTF8如果编译时提示没有 QApplication 没有 UnicodeUTF8 成员，则直接将该成员从函数中删除即可。 int 转 QString12QString s;s = QString::number(123, 10); QString 转 int123QString str=\"stringtoint\";bool ok;int dec = str.toInt(&amp;ok, 10); //转十进制 输出一组整形数据有 1～10 十个数据，想要将其以空格分隔，然后在文本框中输出。 123456QStringList data;int i;for (i=0; i&lt;10; i++) &#123; data &lt;&lt; QString::number(i, 10);&#125;ui-&gt;lineEdit-&gt;setText(data.join(' ')); 延时 1 秒钟12345#include &lt;QTimer&gt;QEventLoop loop;QTimer::singleShot(1000, &amp;loop, SLOT(quit()));loop.exec(); Qt5.4.1 静态编译1234$ tar zxf qt-everywhere-opensource-src-5.4.1.tar.gz$ cd qt-everywhere-opensource-src-5.4.1$ ./configure -debug-and-release -static -nomake examples -no-compile-examples -opengl desktop -openvg -openssl-linked -qt-zlib -qt-libpng -qt-libjpeg -qt-sql-sqlite -qt-xcb$ make; sudo make install 添加图片工程文件夹右键选择 Add New…，然后选择 Qt -&gt; Qt Resource File -&gt; Choose，然后为资源指定一个文件名，如 Test，之后新建的文件会被添加在工程里面的 Resources 目录下，名为 Test.qrc。 选择 Test.qrc，右边选择 Add-&gt;Add Prefix，在 Prefix 里面键入 /images（注意斜杠），然后再点击 Add-&gt;Add File，就能在工程里面添加图片了。 如果添加了名为 pic.png 的图片文件，那么如何在代码中使用呢？ 12QPixmap pic(\":/images/pic.png\");ui-&gt;someLabel-&gt;setPixmap(pic); 在 Windows 下为应用程序添加图标按上面的方法添加制作好的 ico 文件，然后按照 Windows 应用程序资源文件的规则添加图标文件，假定文件名为 res.rc，图标文件名为 icon.ico： 12345678910111213141516171819202122232425262728293031#include \"winver.h\"IDI_ICON1 ICON DISCARDABLE \"icon.ico\"1 VERSIONINFO FILEVERSION 1,0,0,0 PRODUCTVERSION 1,0,0,0 FILEFLAGSMASK 0x3fL FILEFLAGS 0x0L FILEOS VOS_NT_WINDOWS32 FILETYPE VFT_APP BEGIN BLOCK \"StringFileInfo\" BEGIN BLOCK \"000004b0\" BEGIN VALUE \"CompanyName\", \"xxx Technology Co.,Ltd.\" VALUE \"FileDescription\", \"Serial Board Demo\" VALUE \"FileVersion\", \"1.0.0.0\" VALUE \"LegalCopyright\", \"Copyright (c) 2011-2015 xxx Technology Co.,Ltd.\" VALUE \"InternalName\", \"1234\" VALUE \"ProductName\", \"Serial Board\" VALUE \"ProductVersion\", \"1.0.0.0\" END END BLOCK \"VarFileInfo\" BEGIN VALUE \"Translation\", 0x0, 1200 END END 最后，将该文件添加到 Qt 工程的 pro 文件中： 1RC_FILE = res.rc 遍历串口设备12345678#include &lt;QSerialPort/QSerialPortInfo&gt;#include &lt;QDebug&gt;QList&lt;QSerialPortInfo&gt; serialPortInfoList = QSerialPortInfo::availablePorts();foreach (const QSerialPortInfo &amp;serialPortInfo, serialPortInfoList) &#123; qDebug() &lt;&lt; serialPortInfo.portName();&#125; 监听串口数据在 Qt 下，不需要采取多线程来分别处理串口的发送和接收，只需要建立串口数据准备好的信号（Qt 提供），和处理串口收上来的数据的函数（用户编写）的连接即可。 1connect(port, SIGNAL(readyRead()), this, SLOT(userFunc())); 子对话框创建 创建新的 ui 文件； 在父类中创建子类的对象； 建立父类和子类的数据连接（singal slot）； 执行子类对象的 exec() 方法； 返回 子类 emit 返回父类的信号； 子类之行 QDialog::accept() 方法销毁窗口； 更新 textEdit 文字指针位置为可见1connect(textEdit, SIGNAL(cursorPositionChanged()), this, SLOT(updateVisibleArea())); 为 Qt4.8.5 添加 Qwt 支持Qwt 支持 5.4.1 和 4.8.5，但目前尚未找到方法能在 5.4.1 自带的 QtCreator 下显示 Qwt 控件，而且Qwt本身使用起来相对复杂，如果只是画图形的话，建议使用下面的 QcustomPlot 控件。 为 Qt 添加 QtCustomPlot 支持从网站下载QtCustomPlot源码，解压后将 qtcustomplot.h 和 qtcustomplot.cpp 添加到工程目录下即可。 如何使用 Linux 系统调用12#include &lt;unistd.h&gt;::open(...)","tags":[]},{"title":"批处理小结","date":"2015-11-22T01:42:09.000Z","path":"2015/11/22/Windows-Batch-Programming-Summary/","text":"基本 第一行 @echo off 可以禁止输出命令本身 copy 1.txt c:\\ &gt;nul 可以禁止输出结果 用双冒号 :: 注释 shutdown -a 用于取消强制的关机和重启命令 ping -n x 127.1&gt;nul 用于延时 x 秒 taskkill /f /im xxx.exe 用于强制关闭当前所有名称为 xxx.exe 的进程 执行 xxx.bat 时不显示窗口的方法新建 vbs 文件，输入以下内容： 123Set WshShell = CreateObject(&quot;WScript.Shell&quot;)WshShell.Run chr(34) &amp; &quot;xxx.bat&quot; &amp; Chr(34), 0Set WshShell = Nothing 按任意键才能关闭窗口的方法123echo Press Any Key to Continuepause&gt;nulexit 批处理文件执行出现乱码的解决方法如果文件中包含中文，则一定要将文件用记事本按 ANSI 格式保存，如果按 UTF-8 进行保存，在执行文件的时候原本中文就会显示为乱码。 等待进程启动下面的代码用来检查某个名为 xxx.exe 的进程是否存在，如果不存在则等待到存在为止。 123:looptasklist /FI &quot;IMAGENAME eq xxx.exe&quot; 2&gt;nul | find /I /N &quot;xxx.exe&quot;&gt;nulif %ERRORLEVEL% == 1 goto loop 读取写入文件假定有文件 test.txt 其内容为 1，我们将其改为 2，然后保存。 1234set local EnableDelayedExpensionset /p old=&lt; test.txtset /a new = %old% + 1echo %new% &gt; test.txt","tags":[]},{"title":"Proftpd","date":"2015-11-21T14:26:58.000Z","path":"2015/11/21/Proftpd/","text":"安装12$ sudo apt-get install proftpd# choose standalone mode 配置12345678910111213141516171819202122232425262728$ sudo vim /etc/proftpd/proftpd.conf1. change ServerName to your specified name2. uncomment DefaultRoot ~ to jail all users to their homes# following is an example, we want /ftp_pool/pub to be the home directory of the ftp server.# so you should ensure that the permission of the /ftp_pool/pub is 777.&lt;Anonymous /ftp_pool/pub&gt; User ftp Group ftp # We want clients to be able to login with \"anonymous\" as well as \"ftp\" UserAlias anonymous ftp # Cosmetic changes, all files belongs to ftp user DirFakeUser on ftp DirFakeGroup on ftp RequireValidShell off # Limit the maximum number of anonymous logins MaxClients 10 # We want 'welcome.msg' displayed at login, and '.message' displayed # in each newly chdired directory. DisplayLogin welcome.msg DisplayChdir .message # Limit WRITE everywhere in the anonymous chroot &lt;Directory *&gt; &lt;Limit WRITE&gt; AllowAll # currently, all users can download and upload anything. &lt;/Limit&gt; &lt;/Directory&gt;&lt;/anonymous&gt;","tags":[]},{"title":"Git","date":"2015-11-21T14:22:53.000Z","path":"2015/11/21/Things-Need-to-Know-about-Git/","text":"Git 是基于分支概念的 所有的版本控制系统，都只能跟踪文本文件（也就是说，不能是）的内容变化，像图片，视频，word 文档这些二进制文件，版本控制系统只能记录下文件大小的变化，不能跟踪内容。 版本回退后的撤销要点 要有 commit_id 就能回到对应的版本 1git reflog 标签的使用标签的作用，即为某个我们认为具有特殊意义的提交创建一个别名指针（如：v1.0），这样，该提交就可以很方便的被我们定位，而不需要记住它的 commit_id（如：efa123f）试想一下，那会有多难。 创建1234567891011121314151617181920为最新的提交打标签$ git tag v1.0为指定提交打标签$ git tag v1.0 &lt;commit_id&gt;打标签并附带说明文字$ git tag -a v1.0 -m \"descriptions\"附加 GPG 私钥签名（需要安装 GPG）$ git tag -s v1.0 &lt;commit_id&gt;将指定标签推送到远程仓库$ git push origin v1.0(上方对比分支推送)($ git push -u origin master)将所有标签推送到远程仓库$ git push origin -- tags 显示12345显示左右标签，按字母顺序排序$ git tag显示标签详情$ git show v1.0 删除指定标签123456在没推送到远程仓库的情况下删除$ git tag -d v1.0同时删除本地和远程仓库标签$ git tag -d v1.0$ git push origin :refs/tags/v1.0 让 git status 支持中文字符如果使用 UTF-8 字符集 1git config --global core.quotepath false 如果使用 GBK 字符集 12git config --global i18n.logOutputEncoding gbkgit config --global i18n.commitEncoding gbk git diff 对象解读 100644 表示普通文件 100755 表示可执行文件 120000 表示符号链接 Submodule在当前工程中添加 Submodule1234$ git submodule add https://github.com/xxx/xyz.git xyz$ git add xyz .gitmodules$ git commit -m 'add submodule xzy'$ git push origin master Clone 一个带有 Submodule 的工程1234$ git clone https://github.com/yyy/abc.git; cd abc# 这时候可以看到 abc 目录中有 xyz 子目录，但是这个子目录是空的，我们需要手动进行 Submodule 初始化来获取内容$ git submodule init$ git submodule update git 服务器搭建服务器端的配置： 12345678910111213141516171819202122232425262728# make sure that the git's ssh permission is correct.git@xxx$ chmod 700 /home/git/.sshgit@xxx$ chown git:git /home/git/.sshgit@xxx$ chmod 644 /home/git/.ssh/authorized_keysgit@xxx$ chown git:git /home/git/.ssh/authorized_keys# 安装必要组件$ sudo apt-get install python-setuptools# 添加新用户 git$ sudo useradd -m git$ sudo groupadd git$ sudo passwd git# 安装 gitosis$ cd /home/git/$ git clone https://github.com/tv42/gitosis.git$ cd gitosis$ sudo python setup.py install# 将 gitosis 管理员的公钥导入并进行 gitosis 初始化$ sudo -H -u git gitosis-init &lt; /path/to/id_rsa.pub$ sudo chmod 755 /home/git/repositories/gitosis-admin.git/hooks/post-update# 新建 git 仓库并初始化$ mkdir ~/repositories/testproj.git$ cd ~/repositoreis/testproj.git$ git init --bare 如果想要重新创建管理员，只需要将 repositories 下的 gitosis-admin.git 删除，之后重新执行初始化即可。 客户端配置： 123456789101112131415161718192021222324252627282930313233343536373839# 配置 gitosis$ git clone git@&lt;server-ip&gt;:gitosis-admin.git$ cd gitosis-admin# copy other members' id_rsa.pub files into keydir$ vim gitosis.conf# add the following, and save# &lt;member1&gt;@&lt;server1&gt; and &lt;member2&gt;@&lt;server2&gt; are not the gitosis admin[group developers]members = &lt;member1&gt;@&lt;server1&gt; &lt;member2&gt;@&lt;server2&gt;writable = testproj[repo testproj]description = repo for testproj# copy the &lt;member1&gt;@&lt;server1&gt;.pub and &lt;member2&gt;@&lt;server2&gt;.pub to the keydir/ directory# commit and push$ git add gitosis.conf keydir/*$ git commit -m 'add &lt;member1&gt; and &lt;member2&gt;'$ git push origin master# 创建 testproj 工程$ cd$ mkdir testproj$ cd testproj$ git init# add anything you want, e.g. test.c# 提交到远程仓库$ git add test.c$ git commit -m 'initial commit for test.c'$ git remote add origin git@&lt;server-ip&gt;:testproj.git$ git push origin master# COMMENT: you don't need to manually add ssh public key to the# /home/git/.ssh/authorized_keys file, gitosis-admin does this for you!!! gitwebgitweb 是基于浏览器的图形化 git 管理工具。 123456789sudo apt-get install gitwebsudo ln -s /user/share/gitweb/ /path/to/htdocs/sudo vim /etc/gitweb.conf# 将 $projectroot 改为工程所在目录# 如工程路径为：/path/to/repositories/xxx.git，则 $projectroot 改为 /path/to/repositories# 另外，可以修改 xxx.git 目录下的 description 文件，添加一行工程描述# 还可以新建 cloneurl 文件，添加一行工程的 clone 地址 注意：gitweb 默认的页面是 index.cgi，但是 Apache 的 httpd.conf 文件中的 DirectoryIndex 是以 index.html 为起始顺序寻找的，所以我们需要更改一下原来的查找方式，让我们默认就能打开 index.cgi。 12# 在 gitweb 目录下添加 index.html&lt;meta http-equiv=\"refresh\" content=\"0; url=index.cgi\"&gt; 让 git status 支持中文字符如果使用 UTF-8 字符集 1git config --global core.quotepath false 如果使用 GBK 字符集 12git config --global i18n.logOutputEncoding gbkgit config --global i18n.commitEncoding gbk github如果想要在 github 上用 ssh 进行免密码提交，在设置完 ssh key 之后，进行如下测试： 1$ ssh -vT git@github.com 如果检测没有问题，下面假设现在有一个工程，叫 test，那么需要添加 remote 才能正常提交，但是这个 remote 的写法有点特别： 1$ git remote add origin git@github.com:&lt;username&gt;/test.git","tags":[]},{"title":"Setting up Redmine","date":"2015-11-21T14:16:41.000Z","path":"2015/11/21/Setting-up-Redmine/","text":"安装 Ruby on Rails安装 RVM1234# for single user, it will be installed under ~/.rvm$ curl -L get.rvm.io | bash -s stable# for all users, it will be installed under /usr/local/rvm$ sudo curl -L get.vm.io | bash -s stable 安装 Ruby123$ rvm install ruby# check the ruby version$ ruby -v 安装 Rails123456# list all the download sources$ gem source -l# remove the origin sources$ gem source -r https://rubygems.org/$ gem source -a https://ruby.taobao.org/$ gem install rails 安装 Apache21$ sudo apt-get install apache2 安装 MySQL, PhpMyAdmin1$ sudo apt-get install mysql-client mysql-server phpmyadmin 安装 PHP1$ sudo apt-get install libapache2-mod-php5 安装 RedmineDownload the source from www.redmine.org and extract the file to /var/www/html/redmine.Make sure that the redmine directory belongs to group www-data.The own of the redmine directory should in the group of www-data. 123456$ cd /var/www/html$ sudo chown -R www-data:www-data redmine$ cd redmine$ sudo chmod -R 775 files log tmp public/plugin_assets# if you set the permission to 755 according to the official doc,# you will not install the plugin successfully. 创建数据库123CREATE DATABASE redmine CHARACTER SET utf8;CREATE USER &apos;redmine&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;&lt;my_password&gt;&apos;;GRANT ALL PRIVILEGES ON redmine.* TO &apos;redmine&apos;@&apos;localhost&apos;; 数据库连接配置12345678910$ cd /var/www/html/redmine/config$ copy database.yml.example database.yml$ vim database.ymlproduction: adapter: mysql2 database: redmine host: localhost username: redmine password: &lt;my_password&gt; 安装依赖1234$ cd /var/www/html/redmine$ gem install bundler$ bundle install --without development test# during the process, you may be prompted to install Rmagick 生成 session secret key123456$ cd /var/www/html/redmine$ bundle exec rake generate_secret_token# or$ rake secret# then we should add that key to the /etc/profile file like thisexport SECRET_KEY_BASE=asdf12320890asd09f23rlkuf09da09sdfklk324 初始化数据库该过程可以在你删除了数据库中的表之后新建数据库用 123$ cd /var/www/html/redmine$ RAILS_ENV=production bundle exec rake db:migrate$ RAILS_ENV=production bundle exec rake redmine:load_default_data 测试12345$ cd /var/www/html/redmine$ bundle exec rails server webrick -e production [-b &lt;ip&gt;] [-d]# the -b option change the default address from localhost:3000# to &lt;ip&gt;:3000# the -d option runs the server as a daemon. 建立 Apache2 和 Redmine 的连接123456789$ gem install passenger$ passenger-install-apache2-module# then the install process will guide you through.# during the process, you will be asked to add code like the following to /etc/apache2/apache2.confLoadModule passenger_module /usr/local/rvm/gems/ruby-2.2.1/gems/passenger-5.0.21/buildout/apache2/mod_passenger.so&lt;IfModule mod_passenger.c&gt; PassengerRoot /usr/local/rvm/gems/ruby-2.2.1/gems/passenger-5.0.21 PassengerDefaultRuby /usr/local/rvm/gems/ruby-2.2.1/wrappers/ruby&lt;/IfModule&gt; 建立站点配置12$ sudo vim /etc/apache2/apache2.conf#add 'ServerName localhost' 12345678910111213141516171819202122$ sudo vim /etc/apache2/sites-available/000-default.conf# the default port is for redmine&lt;VirtualHost *:80&gt; DocumentRoot /var/www/html/redmine/public &lt;Directory /var/www/html/redmine/public&gt; AllowOverride All Options -MultiViews &lt;/Directory&gt; RailsEnv production RailsBaseURI /redmine ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined&lt;/VirtualHost&gt;Listen 3000 # we should listen to port 3000, or we cannot connect to it# this is for the original apache site&lt;VirtualHost *:3000&gt; DocumentRoot /var/www/html/ ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined&lt;/VirtualHost&gt; 配置 Redmine Mail 功能 申请邮箱 编辑配置文件 1234567891011121314151617181920$ cd /var/www/html/redmine/config$ copy configuration.yml.example configuration.yml$ vim configuration.yml# add the following to the last section of the file # be careful that this configuration cannot accept tab, we should all use spaces instead.production: email_delivery: delivery_method: :smtp smtp_settings: address: \"smtp.sohu.com\" port: 25 # if the site supports ssl access, then we should disable the port 25 # then uncomment the following three lines. # tls: true # enable_starttls_auto: true # port: 587 domain: \"smtp.sohu.com\" authentication: :login user_name: \"lhserver2011@sohu.com\" password: 123456 # password don't quoted 建立 Redmine 同 Git 的连接假设 git 的某个工程存放在 /home/git/repositories/xyz.git，那么在 Redmine 中建立工程的版本库时，就要写这个绝对路径。 123# 将 www-data 加入到 git 组中$ sudo adduser www-data git# 更正 xyz.git 的权限为 755 添加 DMSF 插件12345$ cd /var/www/html/redmine$ git clone https://github.com/danmunn/redmine_dmsf.git plugins/redmine_dmsf$ bundle exec rake redmine:plugins:migrate RAILS_ENV=\"production\"$ sudo service apache2 restart# then in the redmine project page, you should manually check the box of DMSF 查看日志1$ tail -f /var/log/apache2/error.log","tags":[]},{"title":"Setting up a New Blog","date":"2015-09-03T03:13:32.000Z","path":"2015/09/03/Setting-up-a-New-Blog/","text":"安装 Hexo请参照 Hexo 官方文档 安装 git 支持不安装的话，在部署的时候，会提示找不到 git。 1$ npm install hexo-deployer-git --save 创建并初始化 Hexo1234$ mkdir /path/to/your/blogDir$ cd /path/to/your/blogDir$ hexo init$ npm install 启动本地服务并查看12$ hexo generate$ hexo server 接下来，打开浏览器，输入 localhost:4000，即可查看本地博客。 将本地博客部署到 Github 上 在 Github 上新建一个 repository，如果你的账号名称为 xyz，那么你的 repository 名称应该为 xyz.github.io。 编辑 /path/to/your/blogDir 目录下的 _config.yml 文件： 1234deploy: type: git repository: git@github.com:xyz/xyz.github.io.git branch: master 执行部署命令 123$ hexo generate$ hexo deploy # 相当于 git 提交# 接下来需要输入你在 github 上的账号密码，以便进行提交，这里可以设置 SSH 免密码提交 Hexo 的一些常用快捷键123hexo g == hexo generatehexo d == hexo deployhexo n == hexo new 目录结构 /path/to/your/blogDir/source/ 目录用于存放博客相关的文件，如 _posts 目录存放所有文章，我们可以自己新建 assets 目录，用于存放一些图片之类的文件。 /path/to/your/blogDir/themes/ 目录用于存放博客主题。 配置编辑 /path/to/your/blogDir/_config.yml 文件： 根据自己的情况，填写 title, subtitle, description, author, language 几项。 自定义文章名称： 1new_post_name: :year-:month-:day-:title.md 假定今天是 2015 年 10 月 1 号，我们新建一篇文章， 1$ hexo new post \"my first post\" 该命令会在执行后，根据配置文件，自动在 /path/to/your/blogDir/source/_posts 目录下新建名称为 2015-10-01-my-first-post.md 的文件。 自定义 404 页面github 无法对二级域名（xxx.github.io）提供 404 页面自定义功能。目前的做法是，使用其他站点提供的公共 404 页面做跳转，我使用的是腾讯公益页面，具体做法如下： 在 source 目录下新建 404.html 页面，然后把从腾讯公益页面获得的代码加入其中，保存后重新部署即可，试试刷新页面看看，很方便。 更换主题你可以到 https://github.com/hexojs/hexo/wiki/Themes 挑选你自己喜欢的主题。 我选择的是 yilia，下面介绍如何安装和配置。 123$ cd /path/to/your/blogDir$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia$ cd themes/yilia 下面编辑 yilia 目录下的 _config.yml： subnav 下面的每个链接都应该写上 http 或 https 前缀。 mail 的前缀是 mailto。 假定我把头像图片放在了 /path/to/your/blogDir/source/assets 目录下，名称为 pic.jpg，那么 avatar 头像的路径为 “/assets/pic.jpg”。 duoshuo 评论需要先在 多说 注册自己的账号，注册之后会有自己的域名，假设域名为 xyz.duoshuo.com，那么配置文件中，将 duoshuo: true 改为 duoshuo: “xyz” 即可。 通过 Instagram 获取图片首先，请参考 这篇文章。 然后在文章中给出的 index.md 文件末尾添加如下的代码，否则，图片拉取将会失败： 1&lt;script src=\"http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.8.0.js\"&gt;&lt;/script&gt; 常见问题找不到 hexo 命令hexo 的安装默认不会将环境变量添加到 .bashrc 中，我们需要手动更新，否则，在重新打开 terminal 执行 hexo 时，会提示找不到命令。具体命令的位置为： 1~/.nvm/versions/node/v4.2.4/bin 执行 hexo deploy 后，出现 error deployer not found:git 的错误1npm install hexo-deployer-git --save","tags":[]},{"title":"Picture Size List","date":"2015-09-02T06:59:32.000Z","path":"2015/09/02/picture-size-list/","text":"Picture Size Kind size (px) size (cm) 1寸 413x295 2.5x3.5 小2寸 567x390 4.8x3.3 2寸 626x413 3.5x5.3 Standard Background Color Color r.g.b white 255.255.255 red 255.0.0 blue 67.142.219","tags":[]}]